# Generated by Django 4.2.2 on 2023-07-06 09:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("account", "0003_walletbalance"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="creation datetime"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="updated datetime"),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="deleted datetime", null=True
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Code of the transaction, also serves as the transaction identifier",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "origin_code",
                    models.CharField(
                        blank=True,
                        help_text="Origin transaction if the transaction is derived from another transaction",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "from_address",
                    models.CharField(
                        blank=True,
                        help_text="Currency address that sends in the transaction",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "to_address",
                    models.CharField(
                        blank=True,
                        help_text="Currency address that receives in the transaction",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "from_currency",
                    models.CharField(
                        blank=True,
                        help_text="Symbol of the source currency such as BTC, ETH, etc",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "to_currency",
                    models.CharField(
                        blank=True,
                        help_text="Symbol of the target currency such as BTC, ETH, etc",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.PositiveIntegerField(
                        help_text="ID of the associated user (source: account.user_id)"
                    ),
                ),
                (
                    "currency_id",
                    models.PositiveIntegerField(
                        help_text="Related blockchain that will be used"
                    ),
                ),
                (
                    "currency_name",
                    models.CharField(
                        blank=True,
                        help_text="Related currency name used",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "currency_symbol",
                    models.CharField(
                        blank=True,
                        help_text="Related currency symbol used",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "currency_blockchain",
                    models.CharField(
                        blank=True,
                        help_text="Related currency blockchain used",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "currency_std",
                    models.CharField(
                        blank=True,
                        help_text="Related currency blockchain standard used",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Separated by a dot, the amount to be received (e.g., 0.001)",
                        max_digits=25,
                        null=True,
                    ),
                ),
                (
                    "rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Separated by a dot, exchange rate if different currencies",
                        max_digits=25,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirming", "Confirming"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Transaction status",
                        max_length=20,
                    ),
                ),
                (
                    "cancel_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason why the transaction becomes canceled",
                        null=True,
                    ),
                ),
                (
                    "proof_of_payment",
                    models.TextField(
                        blank=True,
                        help_text="Image in base64 format of the transaction receipt",
                        null=True,
                    ),
                ),
                (
                    "expired_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="The expiration of the transaction before it gets ignored",
                        null=True,
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        help_text="The transaction hash (txid)", max_length=255
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[("deposit", "Deposit"), ("withdrawal", "Withdrawal")],
                        help_text="The transaction type",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        help_text="Related account object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="account_transactions",
                        to="account.account",
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="user performing approve action",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_approved_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cancelled_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="user performing cancell action",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_cancelled_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="user performing create action",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="user performing delete action",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_deleted_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        help_text="Related wallet object",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wallet_transactions",
                        to="account.wallet",
                    ),
                ),
            ],
            options={
                "db_table": "recharge_transactions",
            },
        ),
    ]
